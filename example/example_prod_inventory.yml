# Example of a production-style topology
# Stateful hosts are separated for better failure tolerance

all:
  vars:
    # canopy_kafka_admin_password: generated
    # canopy_kafka_sasl_plain_users: {}
    # canopy_kafka_internal_port: 9091
    # canopy_kafka_external_port: 9092
    # canopy_kafka_add_helper_tools: True
    
    # canopy_kafka_confluent_package_version: "5.4.0-1"
    # canopy_kafka_confluent_repo_version: "5.4"
    
    # canopy_kafka_zookeeper_client_port: 2181
    # canopy_kafka_schema_registry_listener_port: 8081
    # canopy_kafka_connect_rest_port: 8083
    # canopy_kafka_connect_local_rest_port: 8084

    # canopy_kafka_is_backup_enabled: True
    # canopy_kafka_backup_topics_regex: ".*"
    # canopy_kafka_backup_topics_dir: "/var/backup/topics"

    # canopy_kafka_is_restore_enabled: False
    # canopy_kafka_restore_topics_dir: "/var/backup/topics"

zookeeper:
  hosts:
    z1:
      # zookeeper_id: 1
    z2:
    z3:

kafka_broker:
  hosts:
    k1:
      # kafka_id: 1
      external_host: k1.ona.org
      #external_port: 9092
    k2:
      external_host: k2.ona.org
    k3:
      external_host: k3.ona.org

schema_registry:
  hosts:
    k1:
      # stateless, leader-election
      # same hosts as kafka_broker potentially a good idea
    k2:
    k3:

kafka_connect:
  hosts:
    k1:
      # stateless, distributed
      # same hosts as kafka_broker potentially a good idea
    k2:
    k3:

kafka_backup_restore:
  hosts:
    br1:
      # each backup/restore host is independent
      # same hosts as kafka broker potentially a *bad* idea

